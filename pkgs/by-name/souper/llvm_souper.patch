diff --git a/lib/Transforms/InstCombine/InstructionCombining.cpp b/lib/Transforms/InstCombine/InstructionCombining.cpp
--- a/lib/Transforms/InstCombine/InstructionCombining.cpp
+++ b/lib/Transforms/InstCombine/InstructionCombining.cpp
@@ -112,6 +112,13 @@
 using namespace llvm;
 using namespace llvm::PatternMatch;
 
+extern bool DisablePeepholes;
+cl::opt<bool, true> DisablePeepholesOption("disable-peepholes",
+                                           cl::desc("Disable InstCombine and InstSimplify"),
+                                           cl::location(DisablePeepholes));
+
+bool DisablePeepholes;
+
 STATISTIC(NumWorklistIterations,
           "Number of instruction combining iterations performed");
 STATISTIC(NumOneIteration, "Number of functions with one iteration");
@@ -4313,6 +4320,11 @@ void InstCombinePass::printPipeline(
 
 PreservedAnalyses InstCombinePass::run(Function &F,
                                        FunctionAnalysisManager &AM) {
+  if (DisablePeepholes) {
+    PreservedAnalyses PA;
+    return PA;
+  }
+
   auto &AC = AM.getResult<AssumptionAnalysis>(F);
   auto &DT = AM.getResult<DominatorTreeAnalysis>(F);
   auto &TLI = AM.getResult<TargetLibraryAnalysis>(F);
@@ -4360,6 +4372,9 @@ void InstructionCombiningPass::getAnalysisUsage(AnalysisUsage &AU) const {
 }
 
 bool InstructionCombiningPass::runOnFunction(Function &F) {
+  if (DisablePeepholes)
+    return false;
+
   if (skipFunction(F))
     return false;
